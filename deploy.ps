# Change to script directory for relative paths safety
Write-Host "=============================="
Write-Host "Setting working directory to ./super-service"
Write-Host "=============================="
Set-Location -Path ./super-service

# Variables
$imageName = "ankushv93/superservice"
$imageTag = "latest"
$fullImageName = "${imageName}:${imageTag}"
$k8sYamlDir = "deployment_yaml"   # folder where your deployment/service YAML files exist

# Step 1: Build Docker image (will run unit tests as part of Dockerfile)
Write-Host "`n=============================="
Write-Host "Step 1: Building Docker image $fullImageName..."
Write-Host "=============================="
docker build -t $fullImageName .

if ($LASTEXITCODE -ne 0) {
    Write-Error "‚ùå Docker build failed. Exiting."
    exit 1
}

# Step 2: Push Docker image to registry
Write-Host "`n=============================="
Write-Host "Step 2: Pushing image $fullImageName to Docker registry (simulating AWS ECR/Azure ACR)..."
Write-Host "=============================="
docker push $fullImageName

if ($LASTEXITCODE -ne 0) {
    Write-Error "‚ùå Docker push failed. Exiting."
    exit 1
}

# Step 3: Scan Docker image for CRITICAL vulnerabilities using Trivy
Write-Host "`n=============================="
Write-Host "Step 3: Scanning Docker image $fullImageName for CRITICAL vulnerabilities..."
Write-Host "=============================="
trivy image --severity CRITICAL --exit-code 0 $fullImageName

Write-Host "`n‚ö†Ô∏è  Note: Only CRITICAL vulnerabilities shown above. Deployment will continue."

# Step 4: Show Kubernetes manifest diff before apply
Write-Host "`n=============================="
Write-Host "Step 4: Showing Kubernetes diff for $k8sYamlDir..."
Write-Host "=============================="
kubectl diff -f $k8sYamlDir

if ($LASTEXITCODE -ne 0 -and $LASTEXITCODE -ne 1) {
    Write-Error "‚ùå kubectl diff failed. Exiting."
    exit 1
}

# Step 5: Prompt for deployment approval
Write-Host "`n‚ö†Ô∏è  Review the changes above."
$approval = Read-Host "Do you want to proceed with deployment? (yes/no)"

if ($approval -ne "yes") {
    Write-Host "‚ùå Deployment aborted by user."
    exit 0
}

# Step 6: Deploy to KIND cluster
Write-Host "`n=============================="
Write-Host "Step 6: Applying Kubernetes manifests from $k8sYamlDir..."
Write-Host "=============================="
kubectl apply -f $k8sYamlDir

if ($LASTEXITCODE -ne 0) {
    Write-Error "‚ùå kubectl apply failed. Exiting."
    exit 1
}

# Step 7: Monitor rollout status
Write-Host "`n=============================="
Write-Host "Step 7: Monitoring rollout status for superservice-deployment..."
Write-Host "=============================="
kubectl rollout status deployment/superservice-deployment

if ($LASTEXITCODE -ne 0) {
    Write-Error "‚ùå Rollout failed. Please check deployment status."
    exit 1
}

# Step 8: Fetch logs from the first matching pod
Write-Host "`n=============================="
Write-Host "Step 8: Fetching logs from application pod..."
Write-Host "=============================="
$podName = kubectl get pods -l app=superservice -o jsonpath="{.items[0].metadata.name}"

if (-not $podName) {
    Write-Error "‚ùå Failed to get pod name. Exiting."
    exit 1
}

kubectl logs $podName

# Step 9: Port-forward service to localhost
Write-Host "`n=============================="
Write-Host "Step 9: Port-forwarding service to localhost:8080..."
Write-Host "=============================="
$portForwardProcess = Start-Process -FilePath "kubectl" `
    -ArgumentList "port-forward", "service/superservice-service", "8080:80" `
    -NoNewWindow -PassThru

Start-Sleep -Seconds 5  # wait for pod/service to initialize

# Step 10: Call /time endpoint to verify app
Write-Host "`n=============================="
Write-Host "Step 10: Testing endpoint http://localhost:8080/time..."
Write-Host "=============================="

try {
    $response = Invoke-WebRequest -Uri "http://localhost:8080/time" -UseBasicParsing -TimeoutSec 10
    if ($response.StatusCode -eq 200) {
        Write-Host "‚úÖ Application responded successfully!"
        Write-Host "Response: $($response.Content)"
    } else {
        Write-Host "‚ö†Ô∏è Unexpected status code: $($response.StatusCode)"
    }
}
catch {
    Write-Error "‚ùå Failed to connect to /time endpoint. Ensure service is running correctly."
}

# Cleanup: Stop port-forward
Write-Host "`n=============================="
Write-Host "Cleaning up: stopping port-forward..."
Write-Host "=============================="
Stop-Process -Id $portForwardProcess.Id -Force

# Final message
Write-Host "`n=============================="
Write-Host "üéâ Deployment completed successfully! App is live."
Write-Host "=============================="
